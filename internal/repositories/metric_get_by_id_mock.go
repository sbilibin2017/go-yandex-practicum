// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-yandex-practicum/internal/repositories/metric_get_by_id.go

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sbilibin2017/go-yandex-practicum/internal/types"
)

// MockMetricGetByIDRepository is a mock of MetricGetByIDRepository interface.
type MockMetricGetByIDRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricGetByIDRepositoryMockRecorder
}

// MockMetricGetByIDRepositoryMockRecorder is the mock recorder for MockMetricGetByIDRepository.
type MockMetricGetByIDRepositoryMockRecorder struct {
	mock *MockMetricGetByIDRepository
}

// NewMockMetricGetByIDRepository creates a new mock instance.
func NewMockMetricGetByIDRepository(ctrl *gomock.Controller) *MockMetricGetByIDRepository {
	mock := &MockMetricGetByIDRepository{ctrl: ctrl}
	mock.recorder = &MockMetricGetByIDRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricGetByIDRepository) EXPECT() *MockMetricGetByIDRepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockMetricGetByIDRepository) GetByID(ctx context.Context, id types.MetricID) (*types.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*types.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMetricGetByIDRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMetricGetByIDRepository)(nil).GetByID), ctx, id)
}
