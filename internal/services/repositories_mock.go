// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-yandex-practicum/internal/services/repositories.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFilterOneRepository is a mock of FilterOneRepository interface.
type MockFilterOneRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFilterOneRepositoryMockRecorder
}

// MockFilterOneRepositoryMockRecorder is the mock recorder for MockFilterOneRepository.
type MockFilterOneRepositoryMockRecorder struct {
	mock *MockFilterOneRepository
}

// NewMockFilterOneRepository creates a new mock instance.
func NewMockFilterOneRepository(ctrl *gomock.Controller) *MockFilterOneRepository {
	mock := &MockFilterOneRepository{ctrl: ctrl}
	mock.recorder = &MockFilterOneRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilterOneRepository) EXPECT() *MockFilterOneRepositoryMockRecorder {
	return m.recorder
}

// FilterOne mocks base method.
func (m *MockFilterOneRepository) FilterOne(ctx context.Context, filter map[string]any) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterOne", ctx, filter)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOne indicates an expected call of FilterOne.
func (mr *MockFilterOneRepositoryMockRecorder) FilterOne(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOne", reflect.TypeOf((*MockFilterOneRepository)(nil).FilterOne), ctx, filter)
}

// MockSaveRepository is a mock of SaveRepository interface.
type MockSaveRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSaveRepositoryMockRecorder
}

// MockSaveRepositoryMockRecorder is the mock recorder for MockSaveRepository.
type MockSaveRepositoryMockRecorder struct {
	mock *MockSaveRepository
}

// NewMockSaveRepository creates a new mock instance.
func NewMockSaveRepository(ctrl *gomock.Controller) *MockSaveRepository {
	mock := &MockSaveRepository{ctrl: ctrl}
	mock.recorder = &MockSaveRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaveRepository) EXPECT() *MockSaveRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockSaveRepository) Save(ctx context.Context, data map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSaveRepositoryMockRecorder) Save(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSaveRepository)(nil).Save), ctx, data)
}
