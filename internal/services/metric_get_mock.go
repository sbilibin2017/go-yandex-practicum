// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-yandex-practicum/internal/services/metric_get.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetricGetFilterOneRepository is a mock of MetricGetFilterOneRepository interface.
type MockMetricGetFilterOneRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricGetFilterOneRepositoryMockRecorder
}

// MockMetricGetFilterOneRepositoryMockRecorder is the mock recorder for MockMetricGetFilterOneRepository.
type MockMetricGetFilterOneRepositoryMockRecorder struct {
	mock *MockMetricGetFilterOneRepository
}

// NewMockMetricGetFilterOneRepository creates a new mock instance.
func NewMockMetricGetFilterOneRepository(ctrl *gomock.Controller) *MockMetricGetFilterOneRepository {
	mock := &MockMetricGetFilterOneRepository{ctrl: ctrl}
	mock.recorder = &MockMetricGetFilterOneRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricGetFilterOneRepository) EXPECT() *MockMetricGetFilterOneRepositoryMockRecorder {
	return m.recorder
}

// FilterOne mocks base method.
func (m *MockMetricGetFilterOneRepository) FilterOne(ctx context.Context, filter map[string]any) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterOne", ctx, filter)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOne indicates an expected call of FilterOne.
func (mr *MockMetricGetFilterOneRepositoryMockRecorder) FilterOne(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOne", reflect.TypeOf((*MockMetricGetFilterOneRepository)(nil).FilterOne), ctx, filter)
}
