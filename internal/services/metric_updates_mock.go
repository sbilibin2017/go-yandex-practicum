// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-yandex-practicum/internal/services/metric_update.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sbilibin2017/go-yandex-practicum/internal/types"
)

// MockMetricUpdateGetByIDRepository is a mock of MetricUpdateGetByIDRepository interface.
type MockMetricUpdateGetByIDRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricUpdateGetByIDRepositoryMockRecorder
}

// MockMetricUpdateGetByIDRepositoryMockRecorder is the mock recorder for MockMetricUpdateGetByIDRepository.
type MockMetricUpdateGetByIDRepositoryMockRecorder struct {
	mock *MockMetricUpdateGetByIDRepository
}

// NewMockMetricUpdateGetByIDRepository creates a new mock instance.
func NewMockMetricUpdateGetByIDRepository(ctrl *gomock.Controller) *MockMetricUpdateGetByIDRepository {
	mock := &MockMetricUpdateGetByIDRepository{ctrl: ctrl}
	mock.recorder = &MockMetricUpdateGetByIDRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricUpdateGetByIDRepository) EXPECT() *MockMetricUpdateGetByIDRepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockMetricUpdateGetByIDRepository) GetByID(ctx context.Context, id types.MetricID) (*types.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*types.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMetricUpdateGetByIDRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMetricUpdateGetByIDRepository)(nil).GetByID), ctx, id)
}

// MockMetricUpdateSaveRepository is a mock of MetricUpdateSaveRepository interface.
type MockMetricUpdateSaveRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricUpdateSaveRepositoryMockRecorder
}

// MockMetricUpdateSaveRepositoryMockRecorder is the mock recorder for MockMetricUpdateSaveRepository.
type MockMetricUpdateSaveRepositoryMockRecorder struct {
	mock *MockMetricUpdateSaveRepository
}

// NewMockMetricUpdateSaveRepository creates a new mock instance.
func NewMockMetricUpdateSaveRepository(ctrl *gomock.Controller) *MockMetricUpdateSaveRepository {
	mock := &MockMetricUpdateSaveRepository{ctrl: ctrl}
	mock.recorder = &MockMetricUpdateSaveRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricUpdateSaveRepository) EXPECT() *MockMetricUpdateSaveRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockMetricUpdateSaveRepository) Save(ctx context.Context, metric types.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMetricUpdateSaveRepositoryMockRecorder) Save(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMetricUpdateSaveRepository)(nil).Save), ctx, metric)
}
