// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-yandex-practicum/internal/services/metric_update.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sbilibin2017/go-yandex-practicum/internal/types"
)

// MockMetricUpdateFilterOneRepository is a mock of MetricUpdateFilterOneRepository interface.
type MockMetricUpdateFilterOneRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricUpdateFilterOneRepositoryMockRecorder
}

// MockMetricUpdateFilterOneRepositoryMockRecorder is the mock recorder for MockMetricUpdateFilterOneRepository.
type MockMetricUpdateFilterOneRepositoryMockRecorder struct {
	mock *MockMetricUpdateFilterOneRepository
}

// NewMockMetricUpdateFilterOneRepository creates a new mock instance.
func NewMockMetricUpdateFilterOneRepository(ctrl *gomock.Controller) *MockMetricUpdateFilterOneRepository {
	mock := &MockMetricUpdateFilterOneRepository{ctrl: ctrl}
	mock.recorder = &MockMetricUpdateFilterOneRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricUpdateFilterOneRepository) EXPECT() *MockMetricUpdateFilterOneRepositoryMockRecorder {
	return m.recorder
}

// FilterOne mocks base method.
func (m *MockMetricUpdateFilterOneRepository) FilterOne(ctx context.Context, id types.MetricID) (*types.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterOne", ctx, id)
	ret0, _ := ret[0].(*types.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOne indicates an expected call of FilterOne.
func (mr *MockMetricUpdateFilterOneRepositoryMockRecorder) FilterOne(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOne", reflect.TypeOf((*MockMetricUpdateFilterOneRepository)(nil).FilterOne), ctx, id)
}

// MockMetricUpdateSaveRepository is a mock of MetricUpdateSaveRepository interface.
type MockMetricUpdateSaveRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricUpdateSaveRepositoryMockRecorder
}

// MockMetricUpdateSaveRepositoryMockRecorder is the mock recorder for MockMetricUpdateSaveRepository.
type MockMetricUpdateSaveRepositoryMockRecorder struct {
	mock *MockMetricUpdateSaveRepository
}

// NewMockMetricUpdateSaveRepository creates a new mock instance.
func NewMockMetricUpdateSaveRepository(ctrl *gomock.Controller) *MockMetricUpdateSaveRepository {
	mock := &MockMetricUpdateSaveRepository{ctrl: ctrl}
	mock.recorder = &MockMetricUpdateSaveRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricUpdateSaveRepository) EXPECT() *MockMetricUpdateSaveRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockMetricUpdateSaveRepository) Save(ctx context.Context, metrics types.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMetricUpdateSaveRepositoryMockRecorder) Save(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMetricUpdateSaveRepository)(nil).Save), ctx, metrics)
}
