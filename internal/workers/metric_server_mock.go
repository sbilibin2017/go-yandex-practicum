// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-yandex-practicum/internal/workers/metric_server.go

// Package workers is a generated GoMock package.
package workers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sbilibin2017/go-yandex-practicum/internal/types"
)

// MockMetricMemoryListAllRepository is a mock of MetricMemoryListAllRepository interface.
type MockMetricMemoryListAllRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricMemoryListAllRepositoryMockRecorder
}

// MockMetricMemoryListAllRepositoryMockRecorder is the mock recorder for MockMetricMemoryListAllRepository.
type MockMetricMemoryListAllRepositoryMockRecorder struct {
	mock *MockMetricMemoryListAllRepository
}

// NewMockMetricMemoryListAllRepository creates a new mock instance.
func NewMockMetricMemoryListAllRepository(ctrl *gomock.Controller) *MockMetricMemoryListAllRepository {
	mock := &MockMetricMemoryListAllRepository{ctrl: ctrl}
	mock.recorder = &MockMetricMemoryListAllRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricMemoryListAllRepository) EXPECT() *MockMetricMemoryListAllRepositoryMockRecorder {
	return m.recorder
}

// ListAll mocks base method.
func (m *MockMetricMemoryListAllRepository) ListAll(ctx context.Context) ([]types.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].([]types.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockMetricMemoryListAllRepositoryMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockMetricMemoryListAllRepository)(nil).ListAll), ctx)
}

// MockMetricFileSaveRepository is a mock of MetricFileSaveRepository interface.
type MockMetricFileSaveRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricFileSaveRepositoryMockRecorder
}

// MockMetricFileSaveRepositoryMockRecorder is the mock recorder for MockMetricFileSaveRepository.
type MockMetricFileSaveRepositoryMockRecorder struct {
	mock *MockMetricFileSaveRepository
}

// NewMockMetricFileSaveRepository creates a new mock instance.
func NewMockMetricFileSaveRepository(ctrl *gomock.Controller) *MockMetricFileSaveRepository {
	mock := &MockMetricFileSaveRepository{ctrl: ctrl}
	mock.recorder = &MockMetricFileSaveRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricFileSaveRepository) EXPECT() *MockMetricFileSaveRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockMetricFileSaveRepository) Save(ctx context.Context, metric types.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMetricFileSaveRepositoryMockRecorder) Save(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMetricFileSaveRepository)(nil).Save), ctx, metric)
}

// MockMetricFileListAllRepository is a mock of MetricFileListAllRepository interface.
type MockMetricFileListAllRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricFileListAllRepositoryMockRecorder
}

// MockMetricFileListAllRepositoryMockRecorder is the mock recorder for MockMetricFileListAllRepository.
type MockMetricFileListAllRepositoryMockRecorder struct {
	mock *MockMetricFileListAllRepository
}

// NewMockMetricFileListAllRepository creates a new mock instance.
func NewMockMetricFileListAllRepository(ctrl *gomock.Controller) *MockMetricFileListAllRepository {
	mock := &MockMetricFileListAllRepository{ctrl: ctrl}
	mock.recorder = &MockMetricFileListAllRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricFileListAllRepository) EXPECT() *MockMetricFileListAllRepositoryMockRecorder {
	return m.recorder
}

// ListAll mocks base method.
func (m *MockMetricFileListAllRepository) ListAll(ctx context.Context) ([]types.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].([]types.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockMetricFileListAllRepositoryMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockMetricFileListAllRepository)(nil).ListAll), ctx)
}

// MockMetricMemorySaveRepository is a mock of MetricMemorySaveRepository interface.
type MockMetricMemorySaveRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricMemorySaveRepositoryMockRecorder
}

// MockMetricMemorySaveRepositoryMockRecorder is the mock recorder for MockMetricMemorySaveRepository.
type MockMetricMemorySaveRepositoryMockRecorder struct {
	mock *MockMetricMemorySaveRepository
}

// NewMockMetricMemorySaveRepository creates a new mock instance.
func NewMockMetricMemorySaveRepository(ctrl *gomock.Controller) *MockMetricMemorySaveRepository {
	mock := &MockMetricMemorySaveRepository{ctrl: ctrl}
	mock.recorder = &MockMetricMemorySaveRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricMemorySaveRepository) EXPECT() *MockMetricMemorySaveRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockMetricMemorySaveRepository) Save(ctx context.Context, metric types.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMetricMemorySaveRepositoryMockRecorder) Save(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMetricMemorySaveRepository)(nil).Save), ctx, metric)
}
