// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-yandex-practicum/internal/workers/metric_server.go

// Package workers is a generated GoMock package.
package workers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sbilibin2017/go-yandex-practicum/internal/types"
)

// MockMetricListAllMemoryRepository is a mock of MetricListAllMemoryRepository interface.
type MockMetricListAllMemoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricListAllMemoryRepositoryMockRecorder
}

// MockMetricListAllMemoryRepositoryMockRecorder is the mock recorder for MockMetricListAllMemoryRepository.
type MockMetricListAllMemoryRepositoryMockRecorder struct {
	mock *MockMetricListAllMemoryRepository
}

// NewMockMetricListAllMemoryRepository creates a new mock instance.
func NewMockMetricListAllMemoryRepository(ctrl *gomock.Controller) *MockMetricListAllMemoryRepository {
	mock := &MockMetricListAllMemoryRepository{ctrl: ctrl}
	mock.recorder = &MockMetricListAllMemoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricListAllMemoryRepository) EXPECT() *MockMetricListAllMemoryRepositoryMockRecorder {
	return m.recorder
}

// ListAll mocks base method.
func (m *MockMetricListAllMemoryRepository) ListAll(ctx context.Context) ([]types.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].([]types.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockMetricListAllMemoryRepositoryMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockMetricListAllMemoryRepository)(nil).ListAll), ctx)
}

// MockMetricSaveFileRepository is a mock of MetricSaveFileRepository interface.
type MockMetricSaveFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricSaveFileRepositoryMockRecorder
}

// MockMetricSaveFileRepositoryMockRecorder is the mock recorder for MockMetricSaveFileRepository.
type MockMetricSaveFileRepositoryMockRecorder struct {
	mock *MockMetricSaveFileRepository
}

// NewMockMetricSaveFileRepository creates a new mock instance.
func NewMockMetricSaveFileRepository(ctrl *gomock.Controller) *MockMetricSaveFileRepository {
	mock := &MockMetricSaveFileRepository{ctrl: ctrl}
	mock.recorder = &MockMetricSaveFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricSaveFileRepository) EXPECT() *MockMetricSaveFileRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockMetricSaveFileRepository) Save(ctx context.Context, metric types.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMetricSaveFileRepositoryMockRecorder) Save(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMetricSaveFileRepository)(nil).Save), ctx, metric)
}

// MockMetricListAllFileRepository is a mock of MetricListAllFileRepository interface.
type MockMetricListAllFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricListAllFileRepositoryMockRecorder
}

// MockMetricListAllFileRepositoryMockRecorder is the mock recorder for MockMetricListAllFileRepository.
type MockMetricListAllFileRepositoryMockRecorder struct {
	mock *MockMetricListAllFileRepository
}

// NewMockMetricListAllFileRepository creates a new mock instance.
func NewMockMetricListAllFileRepository(ctrl *gomock.Controller) *MockMetricListAllFileRepository {
	mock := &MockMetricListAllFileRepository{ctrl: ctrl}
	mock.recorder = &MockMetricListAllFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricListAllFileRepository) EXPECT() *MockMetricListAllFileRepositoryMockRecorder {
	return m.recorder
}

// ListAll mocks base method.
func (m *MockMetricListAllFileRepository) ListAll(ctx context.Context) ([]types.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].([]types.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockMetricListAllFileRepositoryMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockMetricListAllFileRepository)(nil).ListAll), ctx)
}

// MockMetricSaveMemoryRepository is a mock of MetricSaveMemoryRepository interface.
type MockMetricSaveMemoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricSaveMemoryRepositoryMockRecorder
}

// MockMetricSaveMemoryRepositoryMockRecorder is the mock recorder for MockMetricSaveMemoryRepository.
type MockMetricSaveMemoryRepositoryMockRecorder struct {
	mock *MockMetricSaveMemoryRepository
}

// NewMockMetricSaveMemoryRepository creates a new mock instance.
func NewMockMetricSaveMemoryRepository(ctrl *gomock.Controller) *MockMetricSaveMemoryRepository {
	mock := &MockMetricSaveMemoryRepository{ctrl: ctrl}
	mock.recorder = &MockMetricSaveMemoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricSaveMemoryRepository) EXPECT() *MockMetricSaveMemoryRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockMetricSaveMemoryRepository) Save(ctx context.Context, metric types.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMetricSaveMemoryRepositoryMockRecorder) Save(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMetricSaveMemoryRepository)(nil).Save), ctx, metric)
}
