// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/go-yandex-practicum-v2/go-yandex-practicum/internal/workers/metric_agent.go

// Package workers is a generated GoMock package.
package workers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sbilibin2017/go-yandex-practicum/internal/types"
)

// MockMetricFacade is a mock of MetricFacade interface.
type MockMetricFacade struct {
	ctrl     *gomock.Controller
	recorder *MockMetricFacadeMockRecorder
}

// MockMetricFacadeMockRecorder is the mock recorder for MockMetricFacade.
type MockMetricFacadeMockRecorder struct {
	mock *MockMetricFacade
}

// NewMockMetricFacade creates a new mock instance.
func NewMockMetricFacade(ctrl *gomock.Controller) *MockMetricFacade {
	mock := &MockMetricFacade{ctrl: ctrl}
	mock.recorder = &MockMetricFacadeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricFacade) EXPECT() *MockMetricFacadeMockRecorder {
	return m.recorder
}

// Updates mocks base method.
func (m *MockMetricFacade) Updates(ctx context.Context, metrics []types.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updates", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// Updates indicates an expected call of Updates.
func (mr *MockMetricFacadeMockRecorder) Updates(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockMetricFacade)(nil).Updates), ctx, metrics)
}

// MockSemaphore is a mock of Semaphore interface.
type MockSemaphore struct {
	ctrl     *gomock.Controller
	recorder *MockSemaphoreMockRecorder
}

// MockSemaphoreMockRecorder is the mock recorder for MockSemaphore.
type MockSemaphoreMockRecorder struct {
	mock *MockSemaphore
}

// NewMockSemaphore creates a new mock instance.
func NewMockSemaphore(ctrl *gomock.Controller) *MockSemaphore {
	mock := &MockSemaphore{ctrl: ctrl}
	mock.recorder = &MockSemaphoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSemaphore) EXPECT() *MockSemaphoreMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockSemaphore) Acquire(ctx context.Context, n int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire", ctx, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// Acquire indicates an expected call of Acquire.
func (mr *MockSemaphoreMockRecorder) Acquire(ctx, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockSemaphore)(nil).Acquire), ctx, n)
}

// Release mocks base method.
func (m *MockSemaphore) Release(n int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release", n)
}

// Release indicates an expected call of Release.
func (mr *MockSemaphoreMockRecorder) Release(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockSemaphore)(nil).Release), n)
}
